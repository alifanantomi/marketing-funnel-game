# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  site(relativePath: String): Site!
  siteConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SiteFilter): SiteConnection!
  game_start(relativePath: String): Game_start!
  game_startConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: Game_startFilter): Game_startConnection!
  game_setup(relativePath: String): Game_setup!
  game_setupConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: Game_setupFilter): Game_setupConnection!
  game_guidelines(relativePath: String): Game_guidelines!
  game_guidelinesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: Game_guidelinesFilter): Game_guidelinesConnection!
}

input DocumentFilter {
  site: SiteFilter
  game_start: Game_startFilter
  game_setup: Game_setupFilter
  game_guidelines: Game_guidelinesFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Site | Game_start | Game_setup | Game_guidelines | Folder

type Site implements Node & Document {
  site_title: String!
  site_subtitle: String!
  site_card_title: String!
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input SiteFilter {
  site_title: StringFilter
  site_subtitle: StringFilter
  site_card_title: StringFilter
}

type SiteConnectionEdges {
  cursor: String!
  node: Site
}

type SiteConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SiteConnectionEdges]
}

type Game_start implements Node & Document {
  title: String!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input Game_startFilter {
  title: StringFilter
  body: RichTextFilter
}

type Game_startConnectionEdges {
  cursor: String!
  node: Game_start
}

type Game_startConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [Game_startConnectionEdges]
}

type Game_setup implements Node & Document {
  title: String!
  body: JSON
  boot_price: Float
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input Game_setupFilter {
  title: StringFilter
  body: RichTextFilter
  boot_price: NumberFilter
}

type Game_setupConnectionEdges {
  cursor: String!
  node: Game_setup
}

type Game_setupConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [Game_setupConnectionEdges]
}

type Game_guidelines implements Node & Document {
  title: String!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input Game_guidelinesFilter {
  title: StringFilter
  body: RichTextFilter
}

type Game_guidelinesConnectionEdges {
  cursor: String!
  node: Game_guidelines
}

type Game_guidelinesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [Game_guidelinesConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateSite(relativePath: String!, params: SiteMutation!): Site!
  createSite(relativePath: String!, params: SiteMutation!): Site!
  updateGame_start(relativePath: String!, params: Game_startMutation!): Game_start!
  createGame_start(relativePath: String!, params: Game_startMutation!): Game_start!
  updateGame_setup(relativePath: String!, params: Game_setupMutation!): Game_setup!
  createGame_setup(relativePath: String!, params: Game_setupMutation!): Game_setup!
  updateGame_guidelines(relativePath: String!, params: Game_guidelinesMutation!): Game_guidelines!
  createGame_guidelines(relativePath: String!, params: Game_guidelinesMutation!): Game_guidelines!
}

input DocumentUpdateMutation {
  site: SiteMutation
  game_start: Game_startMutation
  game_setup: Game_setupMutation
  game_guidelines: Game_guidelinesMutation
  relativePath: String
}

input DocumentMutation {
  site: SiteMutation
  game_start: Game_startMutation
  game_setup: Game_setupMutation
  game_guidelines: Game_guidelinesMutation
}

input SiteMutation {
  site_title: String
  site_subtitle: String
  site_card_title: String
}

input Game_startMutation {
  title: String
  body: JSON
}

input Game_setupMutation {
  title: String
  body: JSON
  boot_price: Float
}

input Game_guidelinesMutation {
  title: String
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
