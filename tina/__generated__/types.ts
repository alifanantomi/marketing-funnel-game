//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  site: Site;
  siteConnection: SiteConnection;
  game_start: Game_Start;
  game_startConnection: Game_StartConnection;
  game_setup: Game_Setup;
  game_setupConnection: Game_SetupConnection;
  game_guidelines: Game_Guidelines;
  game_guidelinesConnection: Game_GuidelinesConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QuerySiteArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QuerySiteConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SiteFilter>;
};


export type QueryGame_StartArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGame_StartConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Game_StartFilter>;
};


export type QueryGame_SetupArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGame_SetupConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Game_SetupFilter>;
};


export type QueryGame_GuidelinesArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGame_GuidelinesConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Game_GuidelinesFilter>;
};

export type DocumentFilter = {
  site?: InputMaybe<SiteFilter>;
  game_start?: InputMaybe<Game_StartFilter>;
  game_setup?: InputMaybe<Game_SetupFilter>;
  game_guidelines?: InputMaybe<Game_GuidelinesFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Site | Game_Start | Game_Setup | Game_Guidelines | Folder;

export type Site = Node & Document & {
  __typename?: 'Site';
  site_title: Scalars['String']['output'];
  site_subtitle: Scalars['String']['output'];
  site_card_title: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type SiteFilter = {
  site_title?: InputMaybe<StringFilter>;
  site_subtitle?: InputMaybe<StringFilter>;
  site_card_title?: InputMaybe<StringFilter>;
};

export type SiteConnectionEdges = {
  __typename?: 'SiteConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Site>;
};

export type SiteConnection = Connection & {
  __typename?: 'SiteConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<SiteConnectionEdges>>>;
};

export type Game_Start = Node & Document & {
  __typename?: 'Game_start';
  title: Scalars['String']['output'];
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Game_StartFilter = {
  title?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type Game_StartConnectionEdges = {
  __typename?: 'Game_startConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Game_Start>;
};

export type Game_StartConnection = Connection & {
  __typename?: 'Game_startConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<Game_StartConnectionEdges>>>;
};

export type Game_Setup = Node & Document & {
  __typename?: 'Game_setup';
  title: Scalars['String']['output'];
  body?: Maybe<Scalars['JSON']['output']>;
  boot_price?: Maybe<Scalars['Float']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type NumberFilter = {
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  eq?: InputMaybe<Scalars['Float']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
};

export type Game_SetupFilter = {
  title?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
  boot_price?: InputMaybe<NumberFilter>;
};

export type Game_SetupConnectionEdges = {
  __typename?: 'Game_setupConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Game_Setup>;
};

export type Game_SetupConnection = Connection & {
  __typename?: 'Game_setupConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<Game_SetupConnectionEdges>>>;
};

export type Game_Guidelines = Node & Document & {
  __typename?: 'Game_guidelines';
  title: Scalars['String']['output'];
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type Game_GuidelinesFilter = {
  title?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type Game_GuidelinesConnectionEdges = {
  __typename?: 'Game_guidelinesConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Game_Guidelines>;
};

export type Game_GuidelinesConnection = Connection & {
  __typename?: 'Game_guidelinesConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<Game_GuidelinesConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateSite: Site;
  createSite: Site;
  updateGame_start: Game_Start;
  createGame_start: Game_Start;
  updateGame_setup: Game_Setup;
  createGame_setup: Game_Setup;
  updateGame_guidelines: Game_Guidelines;
  createGame_guidelines: Game_Guidelines;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateSiteArgs = {
  relativePath: Scalars['String']['input'];
  params: SiteMutation;
};


export type MutationCreateSiteArgs = {
  relativePath: Scalars['String']['input'];
  params: SiteMutation;
};


export type MutationUpdateGame_StartArgs = {
  relativePath: Scalars['String']['input'];
  params: Game_StartMutation;
};


export type MutationCreateGame_StartArgs = {
  relativePath: Scalars['String']['input'];
  params: Game_StartMutation;
};


export type MutationUpdateGame_SetupArgs = {
  relativePath: Scalars['String']['input'];
  params: Game_SetupMutation;
};


export type MutationCreateGame_SetupArgs = {
  relativePath: Scalars['String']['input'];
  params: Game_SetupMutation;
};


export type MutationUpdateGame_GuidelinesArgs = {
  relativePath: Scalars['String']['input'];
  params: Game_GuidelinesMutation;
};


export type MutationCreateGame_GuidelinesArgs = {
  relativePath: Scalars['String']['input'];
  params: Game_GuidelinesMutation;
};

export type DocumentUpdateMutation = {
  site?: InputMaybe<SiteMutation>;
  game_start?: InputMaybe<Game_StartMutation>;
  game_setup?: InputMaybe<Game_SetupMutation>;
  game_guidelines?: InputMaybe<Game_GuidelinesMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  site?: InputMaybe<SiteMutation>;
  game_start?: InputMaybe<Game_StartMutation>;
  game_setup?: InputMaybe<Game_SetupMutation>;
  game_guidelines?: InputMaybe<Game_GuidelinesMutation>;
};

export type SiteMutation = {
  site_title?: InputMaybe<Scalars['String']['input']>;
  site_subtitle?: InputMaybe<Scalars['String']['input']>;
  site_card_title?: InputMaybe<Scalars['String']['input']>;
};

export type Game_StartMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type Game_SetupMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
  boot_price?: InputMaybe<Scalars['Float']['input']>;
};

export type Game_GuidelinesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type SitePartsFragment = { __typename: 'Site', site_title: string, site_subtitle: string, site_card_title: string };

export type Game_StartPartsFragment = { __typename: 'Game_start', title: string, body?: any | null };

export type Game_SetupPartsFragment = { __typename: 'Game_setup', title: string, body?: any | null, boot_price?: number | null };

export type Game_GuidelinesPartsFragment = { __typename: 'Game_guidelines', title: string, body?: any | null };

export type SiteQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type SiteQuery = { __typename?: 'Query', site: { __typename: 'Site', id: string, site_title: string, site_subtitle: string, site_card_title: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type SiteConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SiteFilter>;
}>;


export type SiteConnectionQuery = { __typename?: 'Query', siteConnection: { __typename?: 'SiteConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'SiteConnectionEdges', cursor: string, node?: { __typename: 'Site', id: string, site_title: string, site_subtitle: string, site_card_title: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type Game_StartQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type Game_StartQuery = { __typename?: 'Query', game_start: { __typename: 'Game_start', id: string, title: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type Game_StartConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Game_StartFilter>;
}>;


export type Game_StartConnectionQuery = { __typename?: 'Query', game_startConnection: { __typename?: 'Game_startConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'Game_startConnectionEdges', cursor: string, node?: { __typename: 'Game_start', id: string, title: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type Game_SetupQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type Game_SetupQuery = { __typename?: 'Query', game_setup: { __typename: 'Game_setup', id: string, title: string, body?: any | null, boot_price?: number | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type Game_SetupConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Game_SetupFilter>;
}>;


export type Game_SetupConnectionQuery = { __typename?: 'Query', game_setupConnection: { __typename?: 'Game_setupConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'Game_setupConnectionEdges', cursor: string, node?: { __typename: 'Game_setup', id: string, title: string, body?: any | null, boot_price?: number | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type Game_GuidelinesQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type Game_GuidelinesQuery = { __typename?: 'Query', game_guidelines: { __typename: 'Game_guidelines', id: string, title: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type Game_GuidelinesConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Game_GuidelinesFilter>;
}>;


export type Game_GuidelinesConnectionQuery = { __typename?: 'Query', game_guidelinesConnection: { __typename?: 'Game_guidelinesConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'Game_guidelinesConnectionEdges', cursor: string, node?: { __typename: 'Game_guidelines', id: string, title: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export const SitePartsFragmentDoc = gql`
    fragment SiteParts on Site {
  __typename
  site_title
  site_subtitle
  site_card_title
}
    `;
export const Game_StartPartsFragmentDoc = gql`
    fragment Game_startParts on Game_start {
  __typename
  title
  body
}
    `;
export const Game_SetupPartsFragmentDoc = gql`
    fragment Game_setupParts on Game_setup {
  __typename
  title
  body
  boot_price
}
    `;
export const Game_GuidelinesPartsFragmentDoc = gql`
    fragment Game_guidelinesParts on Game_guidelines {
  __typename
  title
  body
}
    `;
export const SiteDocument = gql`
    query site($relativePath: String!) {
  site(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...SiteParts
  }
}
    ${SitePartsFragmentDoc}`;
export const SiteConnectionDocument = gql`
    query siteConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: SiteFilter) {
  siteConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...SiteParts
      }
    }
  }
}
    ${SitePartsFragmentDoc}`;
export const Game_StartDocument = gql`
    query game_start($relativePath: String!) {
  game_start(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...Game_startParts
  }
}
    ${Game_StartPartsFragmentDoc}`;
export const Game_StartConnectionDocument = gql`
    query game_startConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: Game_startFilter) {
  game_startConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...Game_startParts
      }
    }
  }
}
    ${Game_StartPartsFragmentDoc}`;
export const Game_SetupDocument = gql`
    query game_setup($relativePath: String!) {
  game_setup(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...Game_setupParts
  }
}
    ${Game_SetupPartsFragmentDoc}`;
export const Game_SetupConnectionDocument = gql`
    query game_setupConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: Game_setupFilter) {
  game_setupConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...Game_setupParts
      }
    }
  }
}
    ${Game_SetupPartsFragmentDoc}`;
export const Game_GuidelinesDocument = gql`
    query game_guidelines($relativePath: String!) {
  game_guidelines(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...Game_guidelinesParts
  }
}
    ${Game_GuidelinesPartsFragmentDoc}`;
export const Game_GuidelinesConnectionDocument = gql`
    query game_guidelinesConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: Game_guidelinesFilter) {
  game_guidelinesConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...Game_guidelinesParts
      }
    }
  }
}
    ${Game_GuidelinesPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      site(variables: SiteQueryVariables, options?: C): Promise<{data: SiteQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SiteQueryVariables, query: string}> {
        return requester<{data: SiteQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SiteQueryVariables, query: string}, SiteQueryVariables>(SiteDocument, variables, options);
      },
    siteConnection(variables?: SiteConnectionQueryVariables, options?: C): Promise<{data: SiteConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SiteConnectionQueryVariables, query: string}> {
        return requester<{data: SiteConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SiteConnectionQueryVariables, query: string}, SiteConnectionQueryVariables>(SiteConnectionDocument, variables, options);
      },
    game_start(variables: Game_StartQueryVariables, options?: C): Promise<{data: Game_StartQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Game_StartQueryVariables, query: string}> {
        return requester<{data: Game_StartQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Game_StartQueryVariables, query: string}, Game_StartQueryVariables>(Game_StartDocument, variables, options);
      },
    game_startConnection(variables?: Game_StartConnectionQueryVariables, options?: C): Promise<{data: Game_StartConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Game_StartConnectionQueryVariables, query: string}> {
        return requester<{data: Game_StartConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Game_StartConnectionQueryVariables, query: string}, Game_StartConnectionQueryVariables>(Game_StartConnectionDocument, variables, options);
      },
    game_setup(variables: Game_SetupQueryVariables, options?: C): Promise<{data: Game_SetupQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Game_SetupQueryVariables, query: string}> {
        return requester<{data: Game_SetupQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Game_SetupQueryVariables, query: string}, Game_SetupQueryVariables>(Game_SetupDocument, variables, options);
      },
    game_setupConnection(variables?: Game_SetupConnectionQueryVariables, options?: C): Promise<{data: Game_SetupConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Game_SetupConnectionQueryVariables, query: string}> {
        return requester<{data: Game_SetupConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Game_SetupConnectionQueryVariables, query: string}, Game_SetupConnectionQueryVariables>(Game_SetupConnectionDocument, variables, options);
      },
    game_guidelines(variables: Game_GuidelinesQueryVariables, options?: C): Promise<{data: Game_GuidelinesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Game_GuidelinesQueryVariables, query: string}> {
        return requester<{data: Game_GuidelinesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Game_GuidelinesQueryVariables, query: string}, Game_GuidelinesQueryVariables>(Game_GuidelinesDocument, variables, options);
      },
    game_guidelinesConnection(variables?: Game_GuidelinesConnectionQueryVariables, options?: C): Promise<{data: Game_GuidelinesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Game_GuidelinesConnectionQueryVariables, query: string}> {
        return requester<{data: Game_GuidelinesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Game_GuidelinesConnectionQueryVariables, query: string}, Game_GuidelinesConnectionQueryVariables>(Game_GuidelinesConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  